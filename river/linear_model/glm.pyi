import pandas as pd
import typing
from river import base, optim
from typing import Any

class GLM:
    optimizer: Any = ...
    loss: Any = ...
    l2: Any = ...
    intercept_init: Any = ...
    intercept: Any = ...
    intercept_lr: Any = ...
    clip_gradient: Any = ...
    initializer: Any = ...
    def __init__(self, optimizer: Any, loss: Any, l2: Any, intercept_init: Any, intercept_lr: Any, clip_gradient: Any, initializer: Any) -> None: ...
    @property
    def weights(self): ...
    def learn_one(self, x: Any, y: Any, w: float = ...): ...
    def learn_many(self, X: pd.DataFrame, y: pd.Series, w: typing.Union[float, pd.Series]=...) -> Any: ...

class LinearRegression(GLM, base.MiniBatchRegressor):
    def __init__(self, optimizer: optim.Optimizer=..., loss: optim.losses.RegressionLoss=..., l2: Any=..., intercept_init: Any=..., intercept_lr: typing.Union[optim.schedulers.Scheduler, float]=..., clip_gradient: Any=..., initializer: optim.initializers.Initializer=...) -> None: ...
    def predict_one(self, x: Any): ...
    def predict_many(self, X: Any): ...
    def debug_one(self, x: dict, decimals: Any=...) -> str: ...

class LogisticRegression(GLM, base.MiniBatchClassifier):
    def __init__(self, optimizer: optim.Optimizer=..., loss: optim.losses.BinaryLoss=..., l2: Any=..., intercept_init: Any=..., intercept_lr: typing.Union[float, optim.schedulers.Scheduler]=..., clip_gradient: Any=..., initializer: optim.initializers.Initializer=...) -> None: ...
    def predict_proba_one(self, x: Any): ...
    def predict_proba_many(self, X: pd.DataFrame) -> pd.DataFrame: ...

class Perceptron(LogisticRegression):
    def __init__(self, l2: Any=..., clip_gradient: Any=..., initializer: optim.initializers.Initializer=...) -> None: ...
