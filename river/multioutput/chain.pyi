import collections
from river import base
from typing import Any, Optional

class BaseChain(base.WrapperMixin, collections.UserDict):
    model: Any = ...
    order: Any = ...
    seed: Any = ...
    def __init__(self, model: Any, order: Optional[Any] = ..., seed: Optional[Any] = ...) -> None: ...

class ClassifierChain(BaseChain, base.Classifier, base.MultiOutputMixin):
    def __init__(self, model: base.Classifier, order: list=..., seed: int=...) -> None: ...
    def learn_one(self, x: Any, y: Any): ...
    def predict_proba_one(self, x: Any): ...
    def predict_one(self, x: Any): ...

class RegressorChain(BaseChain, base.Regressor, base.MultiOutputMixin):
    def __init__(self, model: base.Regressor, order: list=..., seed: int=...) -> None: ...
    def learn_one(self, x: Any, y: Any): ...
    def predict_one(self, x: Any): ...

class ProbabilisticClassifierChain(ClassifierChain):
    def __init__(self, model: base.Classifier) -> None: ...
    def predict_one(self, x: Any): ...

class MonteCarloClassifierChain(ProbabilisticClassifierChain):
    m: Any = ...
    def __init__(self, model: base.Classifier, m: int=..., seed: int=...) -> None: ...
    def predict_one(self, x: Any): ...
