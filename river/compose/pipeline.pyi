import collections
import pandas as pd
import typing
from .. import base
from typing import Any, Optional

class Pipeline(base.Estimator):
    steps: Any = ...
    def __init__(self, *steps: Any) -> None: ...
    def __getitem__(self, key: Any): ...
    def __len__(self): ...
    def __or__(self, other: Any): ...
    def __ror__(self, other: Any): ...
    def __add__(self, other: Any): ...
    def learn_one(self, x: dict, y: Any=..., **params: Any) -> Any: ...
    def transform_one(self, x: dict) -> Any: ...
    def predict_one(self, x: dict) -> Any: ...
    def predict_proba_one(self, x: dict) -> Any: ...
    def score_one(self, x: dict) -> Any: ...
    def forecast(self, horizon: int, xs: typing.List[dict]=...) -> Any: ...
    def debug_one(self, x: dict, show_types: Any=..., n_decimals: Any=...) -> str: ...
    def learn_many(self, X: pd.DataFrame, y: pd.Series=..., **params: Any) -> Any: ...
    def transform_many(self, X: pd.DataFrame) -> Any: ...
    def predict_many(self, X: pd.DataFrame) -> Any: ...
    def predict_proba_many(self, X: pd.DataFrame) -> Any: ...
    def draw(self): ...

class Network(collections.UserList):
    edges: Any = ...
    directed: Any = ...
    name: Any = ...
    labelloc: Any = ...
    def __init__(self, nodes: Any, edges: Any, directed: Any, name: Optional[Any] = ..., labelloc: Optional[Any] = ...) -> None: ...
    def append(self, a: Any) -> None: ...
    def link(self, a: Any, b: Any) -> None: ...
    def draw(self): ...
