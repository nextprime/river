import abc
from river import base
from typing import Any, Optional

class Initializer(base.Base, abc.ABC, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def __call__(self, shape: int = ...) -> Any: ...

class Constant(Initializer):
    value: Any = ...
    def __init__(self, value: float) -> None: ...
    def __call__(self, shape: int = ...): ...

class Zeros(Constant):
    def __init__(self) -> None: ...

class Normal(Initializer):
    mu: Any = ...
    sigma: Any = ...
    seed: Any = ...
    def __init__(self, mu: float = ..., sigma: float = ..., seed: Optional[Any] = ...) -> None: ...
    def __call__(self, shape: int = ...): ...
