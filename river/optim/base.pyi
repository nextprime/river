import abc
import typing
from . import schedulers as schedulers
from river import base as base
from typing import Any

class Optimizer(base.Base, abc.ABC, metaclass=abc.ABCMeta):
    lr: Any = ...
    n_iterations: int = ...
    def __init__(self, lr: typing.Union[schedulers.Scheduler, float]) -> None: ...
    @property
    def learning_rate(self) -> float: ...
    def update_before_pred(self, w: dict) -> dict: ...
    def update_after_pred(self, w: dict, g: dict) -> dict: ...
