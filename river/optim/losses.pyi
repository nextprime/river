import abc
import typing
from river import base
from typing import Any

class Loss(base.Base, abc.ABC, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def __call__(self, y_true: Any, y_pred: Any) -> Any: ...
    @abc.abstractmethod
    def gradient(self, y_true: Any, y_pred: Any) -> Any: ...
    @abc.abstractmethod
    def mean_func(self, y_pred: Any) -> Any: ...

class BinaryLoss(Loss, metaclass=abc.ABCMeta):
    def mean_func(self, y_pred: Any): ...

class MultiClassLoss(Loss, metaclass=abc.ABCMeta):
    def mean_func(self, y_pred: Any): ...

class RegressionLoss(Loss, metaclass=abc.ABCMeta):
    def mean_func(self, y_pred: Any): ...

class Absolute(RegressionLoss):
    def __call__(self, y_true: Any, y_pred: Any): ...
    def gradient(self, y_true: Any, y_pred: Any): ...

class Cauchy(RegressionLoss):
    C: Any = ...
    def __init__(self, C: int = ...) -> None: ...
    def __call__(self, y_true: Any, y_pred: Any): ...
    def gradient(self, y_true: Any, y_pred: Any): ...

class CrossEntropy(MultiClassLoss):
    class_weight: Any = ...
    def __init__(self, class_weight: typing.Dict[base.typing.ClfTarget, float]=...) -> None: ...
    def __call__(self, y_true: Any, y_pred: Any): ...
    def gradient(self, y_true: Any, y_pred: Any): ...

class Hinge(BinaryLoss):
    threshold: Any = ...
    def __init__(self, threshold: float = ...) -> None: ...
    def __call__(self, y_true: Any, y_pred: Any): ...
    def gradient(self, y_true: Any, y_pred: Any): ...

class EpsilonInsensitiveHinge(RegressionLoss):
    eps: Any = ...
    def __init__(self, eps: float = ...) -> None: ...
    def __call__(self, y_true: Any, y_pred: Any): ...
    def gradient(self, y_true: Any, y_pred: Any): ...

class Log(BinaryLoss):
    weight_pos: Any = ...
    weight_neg: Any = ...
    def __init__(self, weight_pos: float = ..., weight_neg: float = ...) -> None: ...
    def __call__(self, y_true: Any, y_pred: Any): ...
    def gradient(self, y_true: Any, y_pred: Any): ...

class Quantile(RegressionLoss):
    alpha: Any = ...
    def __init__(self, alpha: float = ...) -> None: ...
    def __call__(self, y_true: Any, y_pred: Any): ...
    def gradient(self, y_true: Any, y_pred: Any): ...

class Squared(RegressionLoss):
    def __call__(self, y_true: Any, y_pred: Any): ...
    def gradient(self, y_true: Any, y_pred: Any): ...

class BinaryFocalLoss(BinaryLoss):
    gamma: Any = ...
    beta: Any = ...
    def __init__(self, gamma: int = ..., beta: int = ...) -> None: ...
    def __call__(self, y_true: Any, y_pred: Any): ...
    def gradient(self, y_true: Any, y_pred: Any): ...

class Poisson(RegressionLoss):
    def __call__(self, y_true: Any, y_pred: Any): ...
    def gradient(self, y_true: Any, y_pred: Any): ...
    def mean_func(self, y_pred: Any): ...
