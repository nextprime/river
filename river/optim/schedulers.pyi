import abc
from river import base, optim
from typing import Any

class Scheduler(base.Base, abc.ABC, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def get(self, t: int) -> float: ...

class Constant(Scheduler):
    learning_rate: Any = ...
    def __init__(self, learning_rate: float) -> None: ...
    def get(self, t: Any): ...

class InverseScaling(Scheduler):
    learning_rate: Any = ...
    power: Any = ...
    def __init__(self, learning_rate: float, power: Any=...) -> None: ...
    def get(self, t: Any): ...

class Optimal(Scheduler):
    loss: Any = ...
    alpha: Any = ...
    t0: Any = ...
    def __init__(self, loss: optim.losses.Loss, alpha: Any=...) -> None: ...
    def get(self, t: Any): ...
