import typing
from .base import BaseFM
from river import base, optim
from typing import Any

class HOFM(BaseFM):
    degree: Any = ...
    def __init__(self, degree: Any, n_factors: Any, weight_optimizer: Any, latent_optimizer: Any, loss: Any, sample_normalization: Any, l1_weight: Any, l2_weight: Any, l1_latent: Any, l2_latent: Any, intercept: Any, intercept_lr: Any, weight_initializer: Any, latent_initializer: Any, clip_gradient: Any, seed: Any) -> None: ...

class HOFMRegressor(HOFM, base.Regressor):
    def __init__(self, degree: Any=..., n_factors: Any=..., weight_optimizer: optim.Optimizer=..., latent_optimizer: optim.Optimizer=..., loss: optim.losses.RegressionLoss=..., sample_normalization: Any=..., l1_weight: Any=..., l2_weight: Any=..., l1_latent: Any=..., l2_latent: Any=..., intercept: Any=..., intercept_lr: typing.Union[optim.schedulers.Scheduler, float]=..., weight_initializer: optim.initializers.Initializer=..., latent_initializer: optim.initializers.Initializer=..., clip_gradient: Any=..., seed: int=...) -> None: ...
    def predict_one(self, x: Any): ...

class HOFMClassifier(HOFM, base.Classifier):
    def __init__(self, degree: Any=..., n_factors: Any=..., weight_optimizer: optim.Optimizer=..., latent_optimizer: optim.Optimizer=..., loss: optim.losses.BinaryLoss=..., sample_normalization: Any=..., l1_weight: Any=..., l2_weight: Any=..., l1_latent: Any=..., l2_latent: Any=..., intercept: Any=..., intercept_lr: typing.Union[optim.schedulers.Scheduler, float]=..., weight_initializer: optim.initializers.Initializer=..., latent_initializer: optim.initializers.Initializer=..., clip_gradient: Any=..., seed: int=...) -> None: ...
    def predict_proba_one(self, x: Any): ...
