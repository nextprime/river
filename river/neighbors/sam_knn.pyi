from . import libNearestNeighbor as libNearestNeighbor
from river.base import Classifier as Classifier
from river.utils import dict2numpy as dict2numpy
from typing import Any

class SAMKNNClassifier(Classifier):
    n_neighbors: Any = ...
    distance_weighting: Any = ...
    window_size: Any = ...
    ltm_size: Any = ...
    min_stm_size: Any = ...
    use_ltm: Any = ...
    max_ltm_size: Any = ...
    max_stm_size: Any = ...
    stm_aprox_adaption: Any = ...
    stm_distances: Any = ...
    get_labels_fct: Any = ...
    predict_fct: Any = ...
    size_check_fct: Any = ...
    interleaved_pred_histories: Any = ...
    ltm_pred_history: Any = ...
    stm_pred_history: Any = ...
    cmp_pred_history: Any = ...
    train_step_count: int = ...
    stm_sizes: Any = ...
    ltm_sizes: Any = ...
    n_stm_correct: int = ...
    n_ltm_correct: int = ...
    n_cm_correct: int = ...
    n_possible_correct_predictions: int = ...
    n_correct_predictions: int = ...
    classifier_choice: Any = ...
    pred_history: Any = ...
    def __init__(self, n_neighbors: int=..., distance_weighting: Any=..., window_size: int=..., ltm_size: float=..., min_stm_size: int=..., stm_aprox_adaption: Any=..., use_ltm: Any=...) -> None: ...
    def learn_one(self, x: Any, y: Any) -> Classifier: ...
    def predict_one(self, x: dict) -> Any: ...
    def predict_proba_one(self, x: Any) -> None: ...
    @property
    def STMSamples(self): ...
    @property
    def STMLabels(self): ...
    @property
    def LTMSamples(self): ...
    @property
    def LTMLabels(self): ...

class STMSizer:
    @staticmethod
    def get_new_stm_size(aprox_adaption_strategy: Any, labels: Any, n_neighbours: Any, get_labels_fct: Any, prediction_histories: Any, distances_stm: Any, min_stm_size: Any): ...
