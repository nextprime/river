import numpy as np
import typing
from river import base as base
from river.utils.skmultiflow_utils import get_dimensions as get_dimensions
from typing import Any

class KNeighborsBuffer:
    window_size: Any = ...
    def __init__(self, window_size: int=...) -> None: ...
    def reset(self): ...
    def append(self, x: np.ndarray, y: base.typing.Target) -> KNeighborsBuffer: ...
    def pop(self) -> typing.Union[typing.Tuple[np.ndarray, base.typing.Target], None]: ...
    def popleft(self) -> typing.Union[typing.Tuple[np.ndarray, base.typing.Target], None]: ...
    def clear(self) -> KNeighborsBuffer: ...
    @property
    def features_buffer(self) -> np.ndarray: ...
    @property
    def targets_buffer(self) -> typing.List: ...
    @property
    def n_targets(self) -> int: ...
    @property
    def n_features(self) -> int: ...
    @property
    def size(self) -> int: ...

class BaseNeighbors:
    n_neighbors: Any = ...
    window_size: Any = ...
    leaf_size: Any = ...
    p: Any = ...
    data_window: Any = ...
    def __init__(self, n_neighbors: int=..., window_size: int=..., leaf_size: int=..., p: float=..., **kwargs: Any) -> None: ...
    def reset(self) -> BaseNeighbors: ...
