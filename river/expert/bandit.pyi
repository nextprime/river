import abc
import typing
from river import base, metrics
from typing import Any

class Bandit(base.EnsembleMixin, metaclass=abc.ABCMeta):
    metric: Any = ...
    explore_each_arm: Any = ...
    average_reward: Any = ...
    start_after: Any = ...
    warm_up: bool = ...
    seed: Any = ...
    def __init__(self, models: typing.List[base.Estimator], metric: metrics.Metric, explore_each_arm: int, start_after: int, seed: int=...) -> None: ...
    @property
    def best_model(self): ...
    @property
    def percentage_pulled(self): ...
    def predict_one(self, x: Any): ...
    def learn_one(self, x: Any, y: Any): ...
    def add_models(self, new_models: typing.List[base.Estimator]) -> Any: ...

class EpsilonGreedyBandit(Bandit, metaclass=abc.ABCMeta):
    epsilon: Any = ...
    epsilon_decay: Any = ...
    def __init__(self, models: typing.List[base.Estimator], metric: metrics.Metric, epsilon: float=..., epsilon_decay: float=..., explore_each_arm: int=..., start_after: int=..., seed: int=...) -> None: ...

class EpsilonGreedyRegressor(EpsilonGreedyBandit, base.Regressor):
    def __init__(self, models: typing.List[base.Estimator], metric: metrics.RegressionMetric=..., epsilon: float=..., epsilon_decay: float=..., explore_each_arm: int=..., start_after: int=..., seed: int=...) -> None: ...

class UCBBandit(Bandit, metaclass=abc.ABCMeta):
    delta: Any = ...
    def __init__(self, models: typing.List[base.Estimator], metric: metrics.Metric, delta: float=..., explore_each_arm: int=..., start_after: int=..., seed: int=...) -> None: ...

class UCBRegressor(UCBBandit, base.Regressor):
    def __init__(self, models: typing.List[base.Estimator], metric: metrics.RegressionMetric=..., delta: float=..., explore_each_arm: int=..., start_after: int=..., seed: int=...) -> None: ...
