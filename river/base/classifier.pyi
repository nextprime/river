import abc
import pandas as pd
import typing
from . import estimator as estimator
from river import base as base
from typing import Any

class Classifier(estimator.Estimator, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def learn_one(self, x: dict, y: base.typing.ClfTarget, **kwargs: Any) -> Classifier: ...
    def predict_proba_one(self, x: dict) -> typing.Dict[base.typing.ClfTarget, float]: ...
    def predict_one(self, x: dict) -> base.typing.ClfTarget: ...
    def predict_proba_many(self, X: pd.DataFrame) -> pd.DataFrame: ...
    def predict_many(self, X: pd.DataFrame) -> pd.Series: ...

class MiniBatchClassifier(Classifier, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def learn_many(self, X: pd.DataFrame, y: pd.Series, **kwargs: Any) -> MiniBatchClassifier: ...
    def predict_proba_many(self, X: pd.DataFrame) -> pd.DataFrame: ...
    def predict_many(self, X: pd.DataFrame) -> pd.Series: ...
