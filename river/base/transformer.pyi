import abc
from river import base as base
from typing import Any

class Transformer(base.Estimator, metaclass=abc.ABCMeta):
    def learn_one(self, x: dict, **kwargs: Any) -> Transformer: ...
    @abc.abstractmethod
    def transform_one(self, x: dict) -> dict: ...
    def __add__(self, other: Any): ...
    def __radd__(self, other: Any): ...
    def __mul__(self, feature: Any): ...
    def __rmul__(self, feature: Any): ...

class SupervisedTransformer(Transformer, metaclass=abc.ABCMeta):
    def learn_one(self, x: dict, y: base.typing.Target, **kwargs: Any) -> SupervisedTransformer: ...
