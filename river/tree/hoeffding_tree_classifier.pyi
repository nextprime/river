from ._base_tree import BaseHoeffdingTree as BaseHoeffdingTree
from ._nodes import LearningNode as LearningNode, LearningNodeMC as LearningNodeMC, LearningNodeNB as LearningNodeNB, LearningNodeNBA as LearningNodeNBA, SplitNode as SplitNode
from ._split_criterion import GiniSplitCriterion as GiniSplitCriterion, HellingerDistanceCriterion as HellingerDistanceCriterion, InfoGainSplitCriterion as InfoGainSplitCriterion
from river import base as base
from river.utils.skmultiflow_utils import normalize_values_in_dict as normalize_values_in_dict
from typing import Any

class HoeffdingTreeClassifier(BaseHoeffdingTree, base.Classifier):
    grace_period: Any = ...
    split_confidence: Any = ...
    tie_threshold: Any = ...
    nb_threshold: Any = ...
    nominal_attributes: Any = ...
    attr_obs: Any = ...
    attr_obs_params: Any = ...
    kwargs: Any = ...
    classes: Any = ...
    def __init__(self, grace_period: int=..., max_depth: int=..., split_criterion: str=..., split_confidence: float=..., tie_threshold: float=..., leaf_prediction: str=..., nb_threshold: int=..., nominal_attributes: list=..., attr_obs: str=..., attr_obs_params: dict=..., **kwargs: Any) -> None: ...
    def split_criterion(self, split_criterion: Any) -> None: ...
    def leaf_prediction(self, leaf_prediction: Any) -> None: ...
    def learn_one(self, x: Any, y: Any, *, sample_weight: float = ...): ...
    def predict_proba_one(self, x: Any): ...
