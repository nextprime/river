from .base import FoundNode as FoundNode, SplitNode as SplitNode
from .hatc_nodes import AdaNode as AdaNode
from .htr_nodes import LearningNodeAdaptive as LearningNodeAdaptive
from river.drift.adwin import ADWIN as ADWIN
from river.stats import Var as Var
from river.utils.skmultiflow_utils import check_random_state as check_random_state
from typing import Any, Optional

class AdaLearningNodeRegressor(LearningNodeAdaptive, AdaNode):
    adwin_delta: Any = ...
    error_change: bool = ...
    def __init__(self, stats: Any, depth: Any, attr_obs: Any, attr_obs_params: Any, leaf_model: Any, adwin_delta: Any, seed: Any) -> None: ...
    @property
    def n_leaves(self): ...
    @property
    def error_estimation(self): ...
    @property
    def error_width(self): ...
    def error_is_null(self): ...
    def kill_tree_children(self, hatr: Any) -> None: ...
    last_split_attempt_at: Any = ...
    def learn_one(self, x: Any, y: Any, *, sample_weight: float = ..., tree: Optional[Any] = ..., parent: Optional[Any] = ..., parent_branch: int = ...) -> None: ...
    def leaf_prediction(self, x: Any, *, tree: Optional[Any] = ...): ...
    def filter_instance_to_leaves(self, x: Any, parent: Any, parent_branch: Any, found_nodes: Any) -> None: ...

class AdaSplitNodeRegressor(SplitNode, AdaNode):
    adwin_delta: Any = ...
    def __init__(self, split_test: Any, stats: Any, depth: Any, adwin_delta: Any, seed: Any) -> None: ...
    @property
    def n_leaves(self): ...
    @property
    def error_estimation(self): ...
    @property
    def error_width(self): ...
    def error_is_null(self): ...
    def learn_one(self, x: Any, y: Any, sample_weight: Any, tree: Any, parent: Any, parent_branch: Any): ...
    def leaf_prediction(self, x: Any, *, tree: Optional[Any] = ...): ...
    def kill_tree_children(self, tree: Any) -> None: ...
    def filter_instance_to_leaves(self, x: Any, parent: Any, parent_branch: Any, found_nodes: Any) -> None: ...

def normalize_error(y_true: Any, y_pred: Any, node: Any): ...
