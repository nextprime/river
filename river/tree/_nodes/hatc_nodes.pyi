from .._tree_utils import do_naive_bayes_prediction as do_naive_bayes_prediction
from .base import FoundNode as FoundNode, SplitNode as SplitNode
from .htc_nodes import LearningNodeNBA as LearningNodeNBA
from abc import ABCMeta, abstractmethod
from river.drift import ADWIN as ADWIN
from river.utils.skmultiflow_utils import check_random_state as check_random_state, normalize_values_in_dict as normalize_values_in_dict
from typing import Any, Optional

class AdaNode(metaclass=ABCMeta):
    @property
    @abstractmethod
    def n_leaves(self) -> Any: ...
    @property
    @abstractmethod
    def error_estimation(self) -> Any: ...
    @property
    @abstractmethod
    def error_width(self) -> Any: ...
    @abstractmethod
    def error_is_null(self) -> Any: ...
    @abstractmethod
    def kill_tree_children(self, hat: Any) -> Any: ...
    @abstractmethod
    def filter_instance_to_leaves(self, x: Any, parent: Any, parent_branch: Any, found_nodes: Any) -> Any: ...

class AdaLearningNodeClassifier(LearningNodeNBA, AdaNode):
    adwin_delta: Any = ...
    error_change: bool = ...
    def __init__(self, stats: Any, depth: Any, attr_obs: Any, attr_obs_params: Any, adwin_delta: Any, seed: Any) -> None: ...
    @property
    def n_leaves(self): ...
    @property
    def error_estimation(self): ...
    @property
    def error_width(self): ...
    def error_is_null(self): ...
    def kill_tree_children(self, hat: Any) -> None: ...
    last_split_attempt_at: Any = ...
    def learn_one(self, x: Any, y: Any, *, sample_weight: float = ..., tree: Optional[Any] = ..., parent: Optional[Any] = ..., parent_branch: int = ...) -> None: ...
    def leaf_prediction(self, x: Any, *, tree: Optional[Any] = ...): ...
    def filter_instance_to_leaves(self, x: Any, parent: Any, parent_branch: Any, found_nodes: Any) -> None: ...

class AdaSplitNodeClassifier(SplitNode, AdaNode):
    adwin_delta: Any = ...
    def __init__(self, split_test: Any, stats: Any, depth: Any, adwin_delta: Any, seed: Any) -> None: ...
    @property
    def n_leaves(self): ...
    @property
    def error_estimation(self): ...
    @property
    def error_width(self): ...
    def error_is_null(self): ...
    def learn_one(self, x: Any, y: Any, *, sample_weight: float = ..., tree: Optional[Any] = ..., parent: Optional[Any] = ..., parent_branch: int = ...): ...
    def leaf_prediction(self, x: Any, *, tree: Optional[Any] = ...): ...
    def kill_tree_children(self, tree: Any) -> None: ...
    def filter_instance_to_leaves(self, x: Any, parent: Any, parent_branch: Any, found_nodes: Any) -> None: ...
