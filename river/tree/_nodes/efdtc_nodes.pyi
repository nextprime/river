import abc
from .._attribute_observer import NominalAttributeClassObserver as NominalAttributeClassObserver, NumericAttributeClassObserverBinaryTree as NumericAttributeClassObserverBinaryTree, NumericAttributeClassObserverGaussian as NumericAttributeClassObserverGaussian, NumericAttributeClassObserverHistogram as NumericAttributeClassObserverHistogram
from .._attribute_test import AttributeSplitSuggestion as AttributeSplitSuggestion
from .base import SplitNode as SplitNode
from .htc_nodes import LearningNode as LearningNode, LearningNodeMC as LearningNodeMC, LearningNodeNB as LearningNodeNB, LearningNodeNBA as LearningNodeNBA
from typing import Any, Optional

class BaseEFDTNode(LearningNode, metaclass=abc.ABCMeta):
    def __init__(self, stats: Any, depth: Any, attr_obs: Any, attr_obs_params: Any, **kwargs: Any) -> None: ...
    def null_split(self, criterion: Any): ...
    def best_split_suggestions(self, criterion: Any, tree: Any): ...
    @staticmethod
    def count_nodes(): ...

class EFDTSplitNode(SplitNode, BaseEFDTNode):
    def __init__(self, split_test: Any, stats: Any, depth: Any, attr_obs: Any, attr_obs_params: Any, attribute_observers: Any) -> None: ...
    @property
    def total_weight(self) -> float: ...
    @staticmethod
    def new_nominal_attribute_observer(): ...
    @staticmethod
    def new_numeric_attribute_observer(attr_obs: Any, attr_obs_params: Any): ...
    def update_stats(self, y: Any, sample_weight: Any) -> None: ...
    def leaf_prediction(self, x: Any, *, tree: Optional[Any] = ...): ...
    def calculate_promise(self) -> None: ...
    @staticmethod
    def is_leaf(): ...
    @staticmethod
    def find_attribute(id_att: Any, split_suggestions: Any): ...
    @property
    def last_split_reevaluation_at(self) -> float: ...
    @last_split_reevaluation_at.setter
    def last_split_reevaluation_at(self, value: float) -> Any: ...
    def count_nodes(self): ...
    def observed_class_distribution_is_pure(self): ...

class EFDTLearningNodeMC(BaseEFDTNode, LearningNodeMC):
    def __init__(self, stats: Any, depth: Any, attr_obs: Any, attr_obs_params: Any) -> None: ...

class EFDTLearningNodeNB(BaseEFDTNode, LearningNodeNB):
    def __init__(self, stats: Any, depth: Any, attr_obs: Any, attr_obs_params: Any) -> None: ...

class EFDTLearningNodeNBA(BaseEFDTNode, LearningNodeNBA):
    def __init__(self, stats: Any, depth: Any, attr_obs: Any, attr_obs_params: Any) -> None: ...
