from .._attribute_observer import NominalAttributeRegressionObserver as NominalAttributeRegressionObserver, NumericAttributeRegressionObserver as NumericAttributeRegressionObserver
from .base import LearningNode as LearningNode
from river.stats import Var as Var
from typing import Any, Optional

class LearningNodeMean(LearningNode):
    def __init__(self, stats: Any, depth: Any, attr_obs: Any, attr_obs_params: Any) -> None: ...
    @staticmethod
    def new_nominal_attribute_observer(): ...
    @staticmethod
    def new_numeric_attribute_observer(attr_obs: Any, attr_obs_params: Any): ...
    def manage_memory(self, criterion: Any, last_check_ratio: Any, last_check_vr: Any, last_check_e: Any) -> None: ...
    def update_stats(self, y: Any, sample_weight: Any) -> None: ...
    def leaf_prediction(self, x: Any, *, tree: Optional[Any] = ...): ...
    @property
    def total_weight(self): ...
    def calculate_promise(self) -> int: ...

class LearningNodeModel(LearningNodeMean):
    def __init__(self, stats: Any, depth: Any, attr_obs: Any, attr_obs_params: Any, leaf_model: Any) -> None: ...
    def learn_one(self, x: Any, y: Any, *, sample_weight: float = ..., tree: Optional[Any] = ...) -> None: ...
    def leaf_prediction(self, x: Any, *, tree: Optional[Any] = ...): ...

class LearningNodeAdaptive(LearningNodeModel):
    def __init__(self, stats: Any, depth: Any, attr_obs: Any, attr_obs_params: Any, leaf_model: Any) -> None: ...
    def learn_one(self, x: Any, y: Any, *, sample_weight: float = ..., tree: Optional[Any] = ...) -> None: ...
    def leaf_prediction(self, x: Any, *, tree: Optional[Any] = ...): ...
