from .._attribute_observer import NominalAttributeClassObserver as NominalAttributeClassObserver, NumericAttributeClassObserverBinaryTree as NumericAttributeClassObserverBinaryTree, NumericAttributeClassObserverGaussian as NumericAttributeClassObserverGaussian, NumericAttributeClassObserverHistogram as NumericAttributeClassObserverHistogram
from .._tree_utils import do_naive_bayes_prediction as do_naive_bayes_prediction
from .base import LearningNode as LearningNode
from river.utils.skmultiflow_utils import normalize_values_in_dict as normalize_values_in_dict
from typing import Any, Optional

class LearningNodeMC(LearningNode):
    def __init__(self, stats: Any, depth: Any, attr_obs: Any, attr_obs_params: Any) -> None: ...
    @staticmethod
    def new_nominal_attribute_observer(): ...
    @staticmethod
    def new_numeric_attribute_observer(attr_obs: Any, attr_obs_params: Any): ...
    def update_stats(self, y: Any, sample_weight: Any) -> None: ...
    def leaf_prediction(self, x: Any, *, tree: Optional[Any] = ...): ...
    @property
    def total_weight(self): ...
    def calculate_promise(self): ...
    def observed_class_distribution_is_pure(self): ...

class LearningNodeNB(LearningNodeMC):
    def __init__(self, stats: Any, depth: Any, attr_obs: Any, attr_obs_params: Any) -> None: ...
    def leaf_prediction(self, x: Any, *, tree: Optional[Any] = ...): ...
    def disable_attribute(self, att_index: Any) -> None: ...

class LearningNodeNBA(LearningNodeMC):
    def __init__(self, stats: Any, depth: Any, attr_obs: Any, attr_obs_params: Any) -> None: ...
    def learn_one(self, x: Any, y: Any, *, sample_weight: float = ..., tree: Optional[Any] = ...) -> None: ...
    def leaf_prediction(self, x: Any, *, tree: Optional[Any] = ...): ...
    def disable_attribute(self, att_index: Any) -> None: ...
