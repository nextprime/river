from .htr_nodes import LearningNodeMean as LearningNodeMean
from river.stats import Var as Var
from river.utils import VectorDict as VectorDict
from typing import Any, Optional

class LearningNodeMeanMultiTarget(LearningNodeMean):
    def __init__(self, stats: Any, depth: Any, attr_obs: Any, attr_obs_params: Any) -> None: ...
    def update_stats(self, y: Any, sample_weight: Any) -> None: ...
    def leaf_prediction(self, x: Any, *, tree: Optional[Any] = ...): ...
    @property
    def total_weight(self): ...

class LearningNodeModelMultiTarget(LearningNodeMeanMultiTarget):
    def __init__(self, stats: Any, depth: Any, attr_obs: Any, attr_obs_params: Any, leaf_models: Any) -> None: ...
    def learn_one(self, x: Any, y: Any, *, sample_weight: float = ..., tree: Optional[Any] = ...) -> None: ...
    def leaf_prediction(self, x: Any, *, tree: Optional[Any] = ...): ...

class LearningNodeAdaptiveMultiTarget(LearningNodeModelMultiTarget):
    def __init__(self, stats: Any, depth: Any, attr_obs: Any, attr_obs_params: Any, leaf_models: Any): ...
    def learn_one(self, x: Any, y: Any, *, sample_weight: float = ..., tree: Optional[Any] = ...) -> None: ...
    def leaf_prediction(self, x: Any, *, tree: Optional[Any] = ...): ...
