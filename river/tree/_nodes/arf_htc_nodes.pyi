import abc
from .htc_nodes import LearningNode as LearningNode, LearningNodeMC as LearningNodeMC, LearningNodeNB as LearningNodeNB, LearningNodeNBA as LearningNodeNBA
from river.utils.skmultiflow_utils import check_random_state as check_random_state
from typing import Any

class BaseRandomLearningNode(LearningNode, metaclass=abc.ABCMeta):
    max_features: Any = ...
    seed: Any = ...
    feature_indices: Any = ...
    def __init__(self, stats: Any, depth: Any, attr_obs: Any, attr_obs_params: Any, max_features: Any, seed: Any, **kwargs: Any) -> None: ...
    def update_attribute_observers(self, x: Any, y: Any, sample_weight: Any, nominal_attributes: Any) -> None: ...

class RandomLearningNodeMC(BaseRandomLearningNode, LearningNodeMC):
    def __init__(self, stats: Any, depth: Any, attr_obs: Any, attr_obs_params: Any, max_features: Any, seed: Any) -> None: ...

class RandomLearningNodeNB(BaseRandomLearningNode, LearningNodeNB):
    def __init__(self, stats: Any, depth: Any, attr_obs: Any, attr_obs_params: Any, max_features: Any, seed: Any) -> None: ...

class RandomLearningNodeNBA(BaseRandomLearningNode, LearningNodeNBA):
    def __init__(self, stats: Any, depth: Any, attr_obs: Any, attr_obs_params: Any, max_features: Any, seed: Any) -> None: ...
