from ._base_tree import BaseHoeffdingTree as BaseHoeffdingTree
from ._nodes import LearningNode as LearningNode, LearningNodeAdaptive as LearningNodeAdaptive, LearningNodeMean as LearningNodeMean, LearningNodeModel as LearningNodeModel, SplitNode as SplitNode
from ._split_criterion import VarianceReductionSplitCriterion as VarianceReductionSplitCriterion
from river import base as base, linear_model as linear_model
from typing import Any

class HoeffdingTreeRegressor(BaseHoeffdingTree, base.Regressor):
    grace_period: Any = ...
    split_confidence: Any = ...
    tie_threshold: Any = ...
    leaf_model: Any = ...
    model_selector_decay: Any = ...
    nominal_attributes: Any = ...
    min_samples_split: Any = ...
    attr_obs: Any = ...
    attr_obs_params: Any = ...
    kwargs: Any = ...
    def __init__(self, grace_period: int=..., max_depth: int=..., split_confidence: float=..., tie_threshold: float=..., leaf_prediction: str=..., leaf_model: base.Regressor=..., model_selector_decay: float=..., nominal_attributes: list=..., attr_obs: str=..., attr_obs_params: dict=..., min_samples_split: int=..., **kwargs: Any) -> None: ...
    def leaf_prediction(self, leaf_prediction: Any) -> None: ...
    def split_criterion(self, split_criterion: Any) -> None: ...
    def learn_one(self, x: Any, y: Any, *, sample_weight: float = ...): ...
    def predict_one(self, x: Any): ...
