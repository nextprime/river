from ._nodes import AdaLearningNodeRegressor as AdaLearningNodeRegressor, AdaSplitNodeRegressor as AdaSplitNodeRegressor, FoundNode as FoundNode
from .hoeffding_tree_regressor import HoeffdingTreeRegressor as HoeffdingTreeRegressor
from river import base as base
from typing import Any

class HoeffdingAdaptiveTreeRegressor(HoeffdingTreeRegressor):
    bootstrap_sampling: Any = ...
    drift_window_threshold: Any = ...
    adwin_confidence: Any = ...
    seed: Any = ...
    def __init__(self, grace_period: int=..., max_depth: int=..., split_confidence: float=..., tie_threshold: float=..., leaf_prediction: str=..., leaf_model: base.Regressor=..., model_selector_decay: float=..., nominal_attributes: list=..., attr_obs: str=..., attr_obs_params: dict=..., min_samples_split: int=..., bootstrap_sampling: bool=..., drift_window_threshold: int=..., adwin_confidence: float=..., seed: Any=..., **kwargs: Any) -> None: ...
    def learn_one(self, x: Any, y: Any, *, sample_weight: float = ...): ...
    def predict_one(self, x: Any): ...
