import abc
import typing
from ._attribute_test import InstanceConditionalTest as InstanceConditionalTest
from ._nodes import FoundNode as FoundNode, LearningNode as LearningNode, Node as Node, SplitNode as SplitNode
from abc import ABC, abstractmethod
from river import base as base
from river.utils.skmultiflow_utils import calculate_object_size as calculate_object_size, normalize_values_in_dict as normalize_values_in_dict, round_sig_fig as round_sig_fig
from typing import Any

GRAPHVIZ_INSTALLED: bool

class BaseHoeffdingTree(ABC, metaclass=abc.ABCMeta):
    max_depth: Any = ...
    binary_split: Any = ...
    memory_estimate_period: Any = ...
    stop_mem_management: Any = ...
    remove_poor_attrs: Any = ...
    merit_preprune: Any = ...
    def __init__(self, max_depth: int=..., binary_split: bool=..., max_size: int=..., memory_estimate_period: int=..., stop_mem_management: bool=..., remove_poor_attrs: bool=..., merit_preprune: bool=...) -> None: ...
    @property
    def max_size(self): ...
    @max_size.setter
    def max_size(self, size: Any) -> None: ...
    @property
    def model_measurements(self): ...
    def model_description(self): ...
    @property
    def depth(self) -> int: ...
    @property
    def split_criterion(self) -> str: ...
    @split_criterion.setter
    @abstractmethod
    def split_criterion(self, split_criterion: Any): ...
    @property
    def leaf_prediction(self) -> str: ...
    @leaf_prediction.setter
    @abstractmethod
    def leaf_prediction(self, leaf_prediction: Any): ...
    def debug_one(self, x: dict) -> typing.Union[str, None]: ...
    def draw(self, max_depth: int=...) -> Any: ...

def transparency_hex(color: typing.Tuple[int, int, int], alpha: float) -> str: ...
