from ._nodes import AdaLearningNodeClassifier as AdaLearningNodeClassifier, AdaSplitNodeClassifier as AdaSplitNodeClassifier, FoundNode as FoundNode, LearningNode as LearningNode, SplitNode as SplitNode
from .hoeffding_tree_classifier import HoeffdingTreeClassifier as HoeffdingTreeClassifier
from river.utils.skmultiflow_utils import add_dict_values as add_dict_values, normalize_values_in_dict as normalize_values_in_dict
from typing import Any

class HoeffdingAdaptiveTreeClassifier(HoeffdingTreeClassifier):
    bootstrap_sampling: Any = ...
    drift_window_threshold: Any = ...
    adwin_confidence: Any = ...
    seed: Any = ...
    def __init__(self, grace_period: int=..., max_depth: int=..., split_criterion: str=..., split_confidence: float=..., tie_threshold: float=..., leaf_prediction: str=..., nb_threshold: int=..., nominal_attributes: list=..., attr_obs: str=..., attr_obs_params: dict=..., bootstrap_sampling: bool=..., drift_window_threshold: int=..., adwin_confidence: float=..., seed: Any=..., **kwargs: Any) -> None: ...
    def learn_one(self, x: Any, y: Any, *, sample_weight: float = ...): ...
    def predict_proba_one(self, x: Any): ...
