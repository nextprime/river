import typing
from ._nodes import LearningNodeAdaptiveMultiTarget as LearningNodeAdaptiveMultiTarget, LearningNodeMeanMultiTarget as LearningNodeMeanMultiTarget, LearningNodeModelMultiTarget as LearningNodeModelMultiTarget
from ._split_criterion import IntraClusterVarianceReductionSplitCriterion as IntraClusterVarianceReductionSplitCriterion
from river import base as base, tree as tree
from typing import Any

class iSOUPTreeRegressor(tree.HoeffdingTreeRegressor, base.MultiOutputMixin):
    targets: Any = ...
    def __init__(self, grace_period: int=..., max_depth: int=..., split_confidence: float=..., tie_threshold: float=..., leaf_prediction: str=..., leaf_model: typing.Union[base.Regressor, typing.Dict]=..., model_selector_decay: float=..., nominal_attributes: list=..., attr_obs: str=..., attr_obs_params: dict=..., min_samples_split: int=..., **kwargs: Any) -> None: ...
    def leaf_prediction(self, leaf_prediction: Any) -> None: ...
    def split_criterion(self, split_criterion: Any) -> None: ...
    def learn_one(self, x: dict, y: typing.Dict[typing.Hashable, base.typing.RegTarget], *, sample_weight: float=...) -> iSOUPTreeRegressor: ...
    def predict_one(self, x: dict) -> typing.Dict[typing.Hashable, base.typing.RegTarget]: ...
