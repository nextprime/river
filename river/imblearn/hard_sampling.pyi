import typing
from river import base as base, optim as optim, utils as utils
from typing import Any, Optional

class Triplet:
    def __lt__(self, other: Any) -> Any: ...

class HardSampling(base.WrapperMixin):
    model: Any = ...
    loss: Any = ...
    pred_func: Any = ...
    p: Any = ...
    size: Any = ...
    buffer: Any = ...
    seed: Any = ...
    def __init__(self, model: Any, loss: Any, size: Any, p: Any, seed: Optional[Any] = ...): ...
    def predict_one(self, x: Any): ...
    def learn_one(self, x: Any, y: Any): ...

class HardSamplingRegressor(HardSampling, base.Regressor):
    def __init__(self, regressor: base.Regressor, size: int, p: float, loss: optim.losses.RegressionLoss=..., seed: int=...) -> None: ...

class HardSamplingClassifier(HardSampling, base.Classifier):
    def __init__(self, classifier: base.Classifier, size: int, p: float, loss: typing.Union[optim.losses.BinaryLoss, optim.losses.MultiClassLoss]=..., seed: int=...) -> None: ...
    def predict_proba_one(self, x: Any): ...
