import abc
from river import base as base
from typing import Any, Optional

class ClassificationSampler(base.WrapperMixin, base.Classifier, metaclass=abc.ABCMeta):
    classifier: Any = ...
    seed: Any = ...
    def __init__(self, classifier: Any, seed: Optional[Any] = ...) -> None: ...
    def predict_proba_one(self, x: Any): ...
    def predict_one(self, x: Any): ...

class RandomUnderSampler(ClassificationSampler):
    desired_dist: Any = ...
    def __init__(self, classifier: base.Classifier, desired_dist: dict, seed: int=...) -> None: ...
    def learn_one(self, x: Any, y: Any): ...

class RandomOverSampler(ClassificationSampler):
    desired_dist: Any = ...
    def __init__(self, classifier: base.Classifier, desired_dist: dict, seed: int=...) -> None: ...
    def learn_one(self, x: Any, y: Any): ...

class RandomSampler(ClassificationSampler):
    sampling_rate: Any = ...
    desired_dist: Any = ...
    def __init__(self, classifier: base.Classifier, desired_dist: dict, sampling_rate: Any=..., seed: int=...) -> None: ...
    def learn_one(self, x: Any, y: Any): ...
