import numpy as np
import typing
from river import base as base
from river.drift import ADWIN as ADWIN
from river.metrics import Accuracy as Accuracy
from river.metrics.base import MultiClassMetric as MultiClassMetric
from river.tree import HoeffdingTreeClassifier as HoeffdingTreeClassifier
from typing import Any

class SRPClassifier(base.WrapperMixin, base.EnsembleMixin, base.Classifier):
    disable_detector: Any = ...
    models: Any = ...
    model: Any = ...
    n_models: Any = ...
    subspace_size: Any = ...
    training_method: Any = ...
    lam: Any = ...
    drift_detector: Any = ...
    warning_detector: Any = ...
    disable_weighted_vote: Any = ...
    metric: Any = ...
    nominal_attributes: Any = ...
    seed: Any = ...
    def __init__(self, model: base.Classifier=..., n_models: int=..., subspace_size: typing.Union[int, float, str]=..., training_method: str=..., lam: float=..., drift_detector: base.DriftDetector=..., warning_detector: base.DriftDetector=..., disable_detector: str=..., disable_weighted_vote: bool=..., nominal_attributes: Any=..., seed: Any=..., metric: MultiClassMetric=...) -> None: ...
    def learn_one(self, x: dict, y: base.typing.ClfTarget, **kwargs: Any) -> Any: ...
    def predict_proba_one(self, x: Any): ...
    def reset(self) -> None: ...

class StreamingRandomPatchesBaseLearner:
    idx_original: Any = ...
    created_on: Any = ...
    model: Any = ...
    metric: Any = ...
    features: Any = ...
    disable_drift_detector: bool = ...
    drift_detector: Any = ...
    disable_background_learner: bool = ...
    warning_detector: Any = ...
    is_background_learner: Any = ...
    n_drifts_detected: int = ...
    n_warnings_detected: int = ...
    nominal_attributes: Any = ...
    rng: Any = ...
    def __init__(self, idx_original: int, model: base.Classifier, metric: MultiClassMetric, created_on: int, drift_detector: base.DriftDetector, warning_detector: base.DriftDetector, is_background_learner: Any, rng: np.random.Generator, features: Any=..., nominal_attributes: Any=...) -> None: ...
    def learn_one(self, x: dict, y: base.typing.ClfTarget, sample_weight: int, n_samples_seen: int, rng: np.random.Generator) -> Any: ...
    def predict_proba_one(self, x: Any): ...
    def reset(self, all_features: list, n_samples_seen: int, rng: np.random.Generator) -> Any: ...

def random_subspace(all_features: list, k: int, rng: np.random.Generator) -> Any: ...
