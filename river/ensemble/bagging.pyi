from river import base
from typing import Any, Optional

class BaseBagging(base.WrapperMixin, base.EnsembleMixin):
    n_models: Any = ...
    model: Any = ...
    seed: Any = ...
    def __init__(self, model: Any, n_models: int = ..., seed: Optional[Any] = ...) -> None: ...
    def learn_one(self, x: Any, y: Any): ...

class BaggingClassifier(BaseBagging, base.Classifier):
    def __init__(self, model: base.Classifier, n_models: Any=..., seed: int=...) -> None: ...
    def predict_proba_one(self, x: Any): ...

class BaggingRegressor(BaseBagging, base.Regressor):
    def __init__(self, model: base.Regressor, n_models: Any=..., seed: int=...) -> None: ...
    def predict_one(self, x: Any): ...

class ADWINBaggingClassifier(BaggingClassifier):
    def __init__(self, model: base.Classifier, n_models: Any=..., seed: int=...) -> None: ...
    def learn_one(self, x: Any, y: Any): ...

class LeveragingBaggingClassifier(BaggingClassifier):
    n_detected_changes: int = ...
    w: Any = ...
    adwin_delta: Any = ...
    bagging_method: Any = ...
    def __init__(self, model: base.Classifier, n_models: int=..., w: float=..., adwin_delta: float=..., bagging_method: str=..., seed: int=...) -> None: ...
    def learn_one(self, x: Any, y: Any): ...
    @property
    def bagging_methods(self): ...
