from river import metrics as metrics
from typing import Any

class _ClassificationReport:
    cm: Any = ...
    accuracy: Any = ...
    kappa: Any = ...
    kappa_m: Any = ...
    kappa_t: Any = ...
    recall: Any = ...
    micro_recall: Any = ...
    macro_recall: Any = ...
    precision: Any = ...
    micro_precision: Any = ...
    macro_precision: Any = ...
    f1: Any = ...
    micro_f1: Any = ...
    macro_f1: Any = ...
    geometric_mean: Any = ...
    def __init__(self, cm: metrics.ConfusionMatrix=...) -> None: ...
    def add_result(self, y_true: Any, y_pred: Any, sample_weight: float = ...) -> None: ...
    def accuracy_score(self): ...
    def kappa_score(self): ...
    def kappa_t_score(self): ...
    def kappa_m_score(self): ...
    def precision_score(self): ...
    def recall_score(self): ...
    def f1_score(self): ...
    def geometric_mean_score(self): ...
    def get_last(self): ...
    @property
    def n_samples(self): ...
    @property
    def n_classes(self): ...
    @property
    def confusion_matrix(self): ...
    def reset(self) -> None: ...

class _RollingClassificationReport(_ClassificationReport):
    window_size: Any = ...
    def __init__(self, cm: metrics.ConfusionMatrix=..., window_size: Any=...) -> None: ...
    def add_result(self, y_true: Any, y_pred: Any, sample_weight: float = ...) -> None: ...

class _MLClassificationReport:
    cm: Any = ...
    hamming: Any = ...
    hamming_loss: Any = ...
    jaccard_index: Any = ...
    exact_match: Any = ...
    def __init__(self, cm: metrics.MultiLabelConfusionMatrix=...) -> None: ...
    def add_result(self, y_true: Any, y_pred: Any, sample_weight: float = ...) -> None: ...
    def hamming_score(self): ...
    def hamming_loss_score(self): ...
    def exact_match_score(self): ...
    def jaccard_score(self): ...
    def get_last(self): ...
    @property
    def n_samples(self): ...
    @property
    def n_labels(self): ...
    @property
    def confusion_matrix(self): ...
    def reset(self) -> None: ...

class _RollingMLClassificationReport(_MLClassificationReport):
    window_size: Any = ...
    def __init__(self, cm: metrics.ConfusionMatrix=..., window_size: Any=...) -> None: ...
    def add_result(self, y_true: Any, y_pred: Any, sample_weight: float = ...) -> None: ...

class _RegressionReport:
    mae: Any = ...
    mse: Any = ...
    r2: Any = ...
    last_true_label: Any = ...
    last_prediction: Any = ...
    def __init__(self) -> None: ...
    def reset(self) -> None: ...
    def add_result(self, y_true: Any, y_pred: Any) -> None: ...
    def get_average_error(self): ...
    def get_mean_square_error(self): ...
    def get_r2_score(self): ...
    def get_last(self): ...
    @property
    def n_samples(self): ...

class _RollingRegressionReport(_RegressionReport):
    window_size: Any = ...
    mae: Any = ...
    mse: Any = ...
    r2: Any = ...
    sample_count: int = ...
    last_true_label: Any = ...
    last_prediction: Any = ...
    def __init__(self, window_size: int = ...) -> None: ...
    def reset(self) -> None: ...
    @property
    def n_samples(self): ...

class _MTRegressionReport:
    n_targets: int = ...
    total_square_error: float = ...
    average_error: float = ...
    n_samples: int = ...
    last_true_label: Any = ...
    last_prediction: Any = ...
    def __init__(self) -> None: ...
    def reset(self) -> None: ...
    def add_result(self, y_true: Any, y_pred: Any) -> None: ...
    def get_average_mean_square_error(self): ...
    def get_average_absolute_error(self): ...
    def get_average_root_mean_square_error(self): ...
    def get_last(self): ...

class _RollingMTRegressionReport(_MTRegressionReport):
    n_targets: int = ...
    total_square_error: float = ...
    average_error: float = ...
    last_true_label: Any = ...
    last_prediction: Any = ...
    window_size: Any = ...
    total_square_error_correction: Any = ...
    average_error_correction: Any = ...
    def __init__(self, window_size: int = ...) -> None: ...
    def reset(self) -> None: ...
    def add_result(self, y_true: Any, y_pred: Any) -> None: ...
    @property
    def n_samples(self): ...
    @n_samples.setter
    def n_samples(self, value: Any) -> None: ...

class RunningTimeMeasurements:
    def __init__(self) -> None: ...
    def reset(self) -> None: ...
    def compute_training_time_begin(self) -> None: ...
    def compute_training_time_end(self) -> None: ...
    def compute_testing_time_begin(self) -> None: ...
    def compute_testing_time_end(self) -> None: ...
    def update_time_measurements(self, inrivernt: int = ...) -> None: ...
    def get_current_training_time(self): ...
    def get_current_testing_time(self): ...
    def get_current_total_running_time(self): ...
    def get_info(self): ...
