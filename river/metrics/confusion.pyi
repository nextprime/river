__pyx_unpickle_ConfusionMatrix: Any
__pyx_unpickle_MultiLabelConfusionMatrix: Any

class ConfusionMatrix:
    _fmt: Any = ...
    _init_classes: Any = ...
    classes: Any = ...
    data: Any = ...
    last_y_pred: Any = ...
    last_y_true: Any = ...
    majority_class: Any = ...
    n_classes: Any = ...
    n_samples: Any = ...
    sample_correction: Any = ...
    shape: Any = ...
    sum_col: Any = ...
    sum_diag: Any = ...
    sum_row: Any = ...
    total_weight: Any = ...
    weight_majority_classifier: Any = ...
    weight_no_change_classifier: Any = ...
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _update_matrix(self, y_true, y_pred, sample_weight = ...) -> Any: ...
    def false_negatives(self, label) -> Any: ...
    def false_positives(self, label) -> Any: ...
    def reset(self) -> Any: ...
    def revert(self, y_true, y_pred, sample_weight = ..., correction = ...) -> Any: ...
    def true_negatives(self, label) -> Any: ...
    def true_positives(self, label) -> Any: ...
    def update(self, y_true, y_pred, sample_weight = ...) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __reduce_cython__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...
    def __setstate_cython__(self, __pyx_state) -> Any: ...

class MultiLabelConfusionMatrix:
    _init_labels: Any = ...
    _label_dict: Any = ...
    _label_idx_cnt: Any = ...
    data: Any = ...
    exact_match_cnt: Any = ...
    jaccard_sum: Any = ...
    labels: Any = ...
    last_y_pred: Any = ...
    last_y_true: Any = ...
    n_labels: Any = ...
    n_samples: Any = ...
    precision_sum: Any = ...
    recall_sum: Any = ...
    sample_correction: Any = ...
    shape: Any = ...
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def reset(self) -> Any: ...
    def revert(self, y_true, y_pred, sample_weight = ..., correction = ...) -> Any: ...
    def update(self, y_true, y_pred, sample_weight = ...) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __reduce_cython__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...
    def __setstate_cython__(self, __pyx_state) -> Any: ...

class defaultdict(dict):
    default_factory: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def copy(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __class_getitem__(self, *args, **kwargs) -> Any: ...
    def __copy__(self) -> Any: ...
    def __missing__(key) -> Any: ...
    def __or__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __ror__(self, other) -> Any: ...
