from river import metrics
from typing import Any, Optional

class FBeta(metrics.BinaryMetric):
    beta: Any = ...
    precision: Any = ...
    recall: Any = ...
    def __init__(self, beta: float, cm: Any=..., pos_val: Any=...) -> None: ...
    def get(self): ...

class MacroFBeta(metrics.MultiClassMetric):
    beta: Any = ...
    def __init__(self, beta: Any, cm: Optional[Any] = ...) -> None: ...
    def get(self): ...

class MicroFBeta(metrics.MultiClassMetric):
    beta: Any = ...
    precision: Any = ...
    recall: Any = ...
    def __init__(self, beta: float, cm: Any=...) -> None: ...
    def get(self): ...

class WeightedFBeta(metrics.MultiClassMetric):
    beta: Any = ...
    def __init__(self, beta: Any, cm: Optional[Any] = ...) -> None: ...
    def get(self): ...

class MultiFBeta(metrics.MultiClassMetric):
    betas: Any = ...
    weights: Any = ...
    def __init__(self, betas: Any, weights: Any, cm: Optional[Any] = ...) -> None: ...
    def get(self): ...

class ExampleFBeta(metrics.MultiOutputClassificationMetric):
    @property
    def bigger_is_better(self): ...
    @property
    def requires_labels(self): ...
    beta: Any = ...
    precision: Any = ...
    recall: Any = ...
    def __init__(self, beta: float, cm: Any=...) -> None: ...
    def get(self): ...

class F1(FBeta):
    def __init__(self, cm: Optional[Any] = ..., pos_val: bool = ...) -> None: ...

class MacroF1(MacroFBeta):
    def __init__(self, cm: Optional[Any] = ...) -> None: ...

class MicroF1(MicroFBeta):
    def __init__(self, cm: Optional[Any] = ...) -> None: ...

class WeightedF1(WeightedFBeta):
    def __init__(self, cm: Optional[Any] = ...) -> None: ...

class ExampleF1(ExampleFBeta):
    def __init__(self, cm: Optional[Any] = ...) -> None: ...
