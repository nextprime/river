import numpy as np
from river import base
from sklearn import base as sklearn_base
from typing import Any, Optional

def convert_river_to_sklearn(estimator: base.Estimator) -> Any: ...

class River2SKLBase(sklearn_base.BaseEstimator, base.WrapperMixin): ...

class River2SKLRegressor(River2SKLBase, sklearn_base.RegressorMixin):
    river_estimator: Any = ...
    def __init__(self, river_estimator: base.Regressor) -> None: ...
    def fit(self, X: Any, y: Any): ...
    def partial_fit(self, X: Any, y: Any): ...
    def predict(self, X: Any) -> np.ndarray: ...

class River2SKLClassifier(River2SKLBase, sklearn_base.ClassifierMixin):
    river_estimator: Any = ...
    def __init__(self, river_estimator: base.Classifier) -> None: ...
    def fit(self, X: Any, y: Any): ...
    def partial_fit(self, X: Any, y: Any, classes: Optional[Any] = ...): ...
    def predict_proba(self, X: Any): ...
    def predict(self, X: Any): ...

class River2SKLTransformer(River2SKLBase, sklearn_base.TransformerMixin):
    river_estimator: Any = ...
    def __init__(self, river_estimator: base.Transformer) -> None: ...
    def fit(self, X: Any, y: Optional[Any] = ...): ...
    def partial_fit(self, X: Any, y: Optional[Any] = ...): ...
    def transform(self, X: Any): ...

class River2SKLClusterer(River2SKLBase, sklearn_base.ClusterMixin):
    river_estimator: Any = ...
    def __init__(self, river_estimator: base.Clusterer) -> None: ...
    def fit(self, X: Any, y: Optional[Any] = ...): ...
    def partial_fit(self, X: Any, y: Any): ...
    def predict(self, X: Any): ...
