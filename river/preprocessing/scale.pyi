import pandas as pd
from river import base
from typing import Any

class Binarizer(base.Transformer):
    threshold: Any = ...
    dtype: Any = ...
    def __init__(self, threshold: float = ..., dtype: Any = ...) -> None: ...
    def transform_one(self, x: Any): ...

class StandardScaler(base.Transformer):
    counts: Any = ...
    means: Any = ...
    vars: Any = ...
    def __init__(self) -> None: ...
    def learn_one(self, x: Any): ...
    def transform_one(self, x: Any): ...
    def learn_many(self, X: pd.DataFrame) -> Any: ...
    def transform_many(self, X: pd.DataFrame) -> Any: ...

class MinMaxScaler(base.Transformer):
    min: Any = ...
    max: Any = ...
    def __init__(self) -> None: ...
    def learn_one(self, x: Any): ...
    def transform_one(self, x: Any): ...

class MaxAbsScaler(base.Transformer):
    abs_max: Any = ...
    def __init__(self) -> None: ...
    def learn_one(self, x: Any): ...
    def transform_one(self, x: Any): ...

class RobustScaler(base.Transformer):
    with_centering: Any = ...
    with_scaling: Any = ...
    q_inf: Any = ...
    q_sup: Any = ...
    median: Any = ...
    iqr: Any = ...
    def __init__(self, with_centering: bool = ..., with_scaling: bool = ..., q_inf: float = ..., q_sup: float = ...) -> None: ...
    def learn_one(self, x: Any): ...
    def transform_one(self, x: Any): ...

class Normalizer(base.Transformer):
    order: Any = ...
    def __init__(self, order: int = ...) -> None: ...
    def transform_one(self, x: Any): ...

class AdaptiveStandardScaler(base.Transformer):
    alpha: Any = ...
    vars: Any = ...
    def __init__(self, alpha: float = ...) -> None: ...
    def learn_one(self, x: Any): ...
    def transform_one(self, x: Any): ...
