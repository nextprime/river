import abc
from river import utils as utils
from typing import Any, Optional

REG: str
BINARY_CLF: str
MULTI_CLF: str
MO_BINARY_CLF: str
MO_REG: str

def get_data_home(): ...

class Dataset(abc.ABC, metaclass=abc.ABCMeta):
    task: Any = ...
    n_features: Any = ...
    n_samples: Any = ...
    n_outputs: Any = ...
    n_classes: Any = ...
    sparse: Any = ...
    def __init__(self, task: Any, n_features: Any, n_samples: Optional[Any] = ..., n_classes: Optional[Any] = ..., n_outputs: Optional[Any] = ..., sparse: bool = ...) -> None: ...
    @abc.abstractmethod
    def __iter__(self) -> Any: ...
    def take(self, k: int) -> Any: ...
    @property
    def desc(self): ...

class SyntheticDataset(Dataset, metaclass=abc.ABCMeta): ...

class FileDataset(Dataset, metaclass=abc.ABCMeta):
    filename: Any = ...
    def __init__(self, filename: Any, **desc: Any) -> None: ...
    @property
    def path(self): ...

class RemoteDataset(FileDataset, metaclass=abc.ABCMeta):
    url: Any = ...
    size: Any = ...
    unpack: Any = ...
    def __init__(self, url: Any, size: Any, filename: Optional[Any] = ..., unpack: bool = ..., **desc: Any) -> None: ...
    @property
    def path(self): ...
    def download(self, force: bool = ..., verbose: bool = ...) -> None: ...
    @property
    def is_downloaded(self): ...
    def __iter__(self) -> Any: ...
