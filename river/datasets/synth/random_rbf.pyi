import numpy as np
from .. import base as base
from river.utils.skmultiflow_utils import check_random_state as check_random_state
from typing import Any

class RandomRBF(base.SyntheticDataset):
    seed_sample: Any = ...
    seed_model: Any = ...
    n_num_features: Any = ...
    n_centroids: Any = ...
    centroids: Any = ...
    centroid_weights: Any = ...
    target_values: Any = ...
    def __init__(self, seed_model: None=..., seed_sample: None=..., n_classes: int=..., n_features: int=..., n_centroids: int=...) -> None: ...
    def __iter__(self) -> Any: ...

class RandomRBFDrift(RandomRBF):
    change_speed: Any = ...
    n_drift_centroids: Any = ...
    centroid_speed: Any = ...
    def __init__(self, seed_model: None=..., seed_sample: None=..., n_classes: int=..., n_features: int=..., n_centroids: int=..., change_speed: float=..., n_drift_centroids: int=...) -> None: ...
    def __iter__(self) -> Any: ...

class Centroid:
    centre: Any = ...
    class_label: Any = ...
    std_dev: Any = ...
    def __init__(self) -> None: ...

def random_index_based_on_weights(weights: list, random_state: np.random.RandomState) -> Any: ...
