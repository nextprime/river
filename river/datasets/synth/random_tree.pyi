from .. import base as base
from river.utils.skmultiflow_utils import check_random_state as check_random_state
from typing import Any

class RandomTree(base.SyntheticDataset):
    seed_tree: Any = ...
    seed_sample: Any = ...
    n_num_features: Any = ...
    n_cat_features: Any = ...
    n_categories_per_feature: Any = ...
    max_tree_depth: Any = ...
    first_leaf_level: Any = ...
    fraction_leaves_per_level: Any = ...
    tree_root: Any = ...
    features_num: Any = ...
    features_cat: Any = ...
    feature_names: Any = ...
    target_values: Any = ...
    def __init__(self, seed_tree: None=..., seed_sample: None=..., n_classes: int=..., n_num_features: int=..., n_cat_features: int=..., n_categories_per_feature: int=..., max_tree_depth: int=..., first_leaf_level: int=..., fraction_leaves_per_level: float=...) -> None: ...
    def __iter__(self) -> Any: ...

class TreeNode:
    class_label: Any = ...
    split_feature_idx: Any = ...
    split_feature_val: Any = ...
    children: Any = ...
    def __init__(self, class_label: int=..., split_feature_idx: int=..., split_feature_val: None=...) -> None: ...
