from . import base as base, summing as summing
from typing import Any

class Mean(base.Univariate):
    n: int = ...
    mean: float = ...
    def __init__(self) -> None: ...
    def update(self, x: Any, w: float = ...): ...
    def revert(self, x: Any, w: float = ...): ...
    def get(self): ...
    def __iadd__(self, other: Any): ...
    def __add__(self, other: Any): ...
    def __isub__(self, other: Any): ...
    def __sub__(self, other: Any): ...

class RollingMean(summing.RollingSum):
    def get(self): ...

class BayesianMean(base.Univariate):
    prior: Any = ...
    prior_weight: Any = ...
    mean: Any = ...
    def __init__(self, prior: float, prior_weight: float) -> None: ...
    @property
    def name(self): ...
    def update(self, x: Any): ...
    def revert(self, x: Any): ...
    def get(self): ...
