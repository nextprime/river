import typing
from typing import Any

class Op:
    symbol: Any = ...
    func: Any = ...
    def __init__(self, symbol: Any, func: Any) -> None: ...
    def __call__(self, a: Any, b: Any): ...

LT: Any
EQ: Any

class Split:
    on: Any = ...
    how: Any = ...
    at: Any = ...
    def __init__(self, on: Any, how: Any, at: Any) -> None: ...
    def __call__(self, x: Any): ...

class Node:
    def __init__(self, **kwargs: Any) -> None: ...

class Branch(Node):
    split: Any = ...
    left: Any = ...
    right: Any = ...
    def __init__(self, split: Any, left: Any, right: Any, **kwargs: Any) -> None: ...
    def next(self, x: Any): ...
    def path(self, x: Any) -> None: ...
    @property
    def size(self): ...
    @property
    def height(self): ...
    def iter_dfs(self, depth: int = ...) -> None: ...
    def iter_leaves(self) -> None: ...
    def iter_branches(self) -> None: ...
    def iter_edges(self) -> None: ...
    def iter_blocks(self, limits: typing.Dict[typing.Hashable, typing.Tuple[float, float]], depth: Any=...) -> Any: ...
    def iter_splits(self, limits: typing.Dict[typing.Hashable, typing.Tuple[float, float]]) -> Any: ...

class Leaf(Node):
    def path(self, x: Any) -> None: ...
    @property
    def size(self): ...
    @property
    def height(self): ...
    def iter_dfs(self, depth: int = ...) -> None: ...
    def iter_leaves(self) -> None: ...
    def iter_branches(self) -> None: ...
    def iter_edges(self) -> None: ...
    def iter_blocks(self, limits: Any, depth: int = ...) -> None: ...
    def iter_splits(self, limits: Any) -> None: ...
